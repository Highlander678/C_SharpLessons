// Решаем три различных задачи по выбору элементов (объектов)
// из списка с помощью стандартных запросов технологии LINQ
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
// Другие директивы using удалены, поскольку они не используются в данной
// программе
namespace LinqСписок
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            this.Text = "Технология LINQ";
            textBox1.Multiline = true;
            // ЗАДАЧА 1. Из списка строк выбрать нужные записи задав
            // условие выбора
            textBox1.Text = "ЗАДАЧА 1: Из списка имен:" + "\r\n";
            // Объявление списка строк и его заполнение:
            var Список = new List<String> { "Витя", "Света", 
                                 "Андрей", "Лариса", "Маша", "Наташа" };
            // Инициализировать список можно также таким образом:
            // var Список = new List<String>(); // - список строк
            // Список.Add("Витя"); Список.Add("Света");
            // Список.Add("Андрей"); Список.Add("Лариса");
            // Список.Add("Маша"); Список.Add("Наташа");
            // Некоторые манипуляции со списком:
            var n = Список.Count; // Количество элементов в списке
            // Получение из списка его элемента с индесом 3 (как в массиве):
            var A = Список.ElementAt(3);
            var Ответ = Список.Remove("Лариса"); // - удаление из списка
            // Преобразовать список в строковый массив:
            var МассивСтрок = Список.ToArray();
            foreach (String x in Список)
                textBox1.Text = textBox1.Text + x + " ";

            textBox1.Text += "\r\n" +
                "выбираем имена длиной четыре символа:" + "\r\n";
            // СписокВыбранныхИмен - это новый список, куда попадают
            // выбранные строки в результате LINQ-запроса:
            var СписокВыбранныхИмен = from Имя in Список
                                      where Имя.Length == 4
                                      orderby Имя
                                      select Имя;
            // Вывод списка выбранных имен в текстовое поле TextBox1:
            foreach (String x in СписокВыбранныхИмен)
                textBox1.Text = textBox1.Text + x + " ";

            // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
            // ЗАДАЧА 2. 
            textBox1.Text += "\r\n\r\n" +
                "ЗАДАЧА 2: Из списка сотрудников предприятия " +
                          "выбираем не курящих для повышения зарплаты:" +
                           "\r\n\r\n";
            // Заполняем список сотрудников:
            var Сотрудники = new List<Сотрудник>{
               new Сотрудник {
                   Имя = "Карапузова Ирина", Возраст = 27, КуритЛи = true},
               new Сотрудник {
                   Имя = "Зиборов Виктор", Возраст = 47, КуритЛи = false},
               new Сотрудник {
                   Имя = "Ломачинская Светлана", 
                                           Возраст = 31, КуритЛи = false},
               new Сотрудник {
                   Имя = "Стороженко Светлана", 
                                            Возраст = 34, КуритЛи = false},
               new Сотрудник {
                   Имя = "Еременко Татьяна", Возраст = 22, КуритЛи = true},
               new Сотрудник {
                   Имя = "Погребицкий Олег", Возраст = 42, КуритЛи = true}};
            // LINQ-запрос:
            var СписокНекурящихСотрудников =
                                     from Сотрудник in Сотрудники
                                     where Сотрудник.КуритЛи == false
                                     orderby Сотрудник.Имя
                                     select Сотрудник;
            // Select определяет, какие поля выводить в список запроса
            // Вывод списка некурящих сотрудников в текстовое поле textBox1:
            foreach (Сотрудник x in СписокНекурящихСотрудников)
                textBox1.Text = textBox1.Text + String.Format("{0} - " +
                               "возраст - {1}" + "\r\n", x.Имя, x.Возраст);

            // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
            // ЗАДАЧА 3.
            textBox1.Text += "\r\n" + 
                             "ЗАДАЧА 3: Из списка студентов факультета " +
                             "выбираем двоечников:" + "\r\n\r\n";
            // Каждый элемент в списке содержит фамилию студента и
            // полученные им текущие оценки:
            List<Студент> Студенты = new List<Студент>();
            Студенты.Add(new Студент { Фамилия = "Зиборов", 
                                 Оценки = new List<int> { 5, 4, 4, 5 }});
            Студенты.Add(new Студент { Фамилия = "Стороженко",
                                 Оценки = new List<int> { 3, 3, 2, 3 }});
            Студенты.Add(new Студент { Фамилия = "Ломачинская",
                                 Оценки = new List<int> { 3, 4, 4, 5 }});
            Студенты.Add(new Студент { Фамилия = "Погребицкий",
                                 Оценки = new List<int> { 2, 4, 3, 2 }});
            Студенты.Add(new Студент { Фамилия = "Левочкин",
                                 Оценки = new List<int> { 3, 3, 4, 3 }});
            //  Для доступа к внутреннему списку оценок предложение from
            //  используем два раза:
            var СписокДвоечников = from Студент Студ in Студенты
                                   from int Оценка in Студ.Оценки
                                   where Оценка <= 2
                                   orderby Студ.Фамилия
                                   select new { Студ.Фамилия, Оценка };
            // Select определяет, какие поля выводить в список запроса
            foreach (var Студик in СписокДвоечников)
                textBox1.Text += 
                    String.Format("Студент {0} имеет оценку: {1}" + "\r\n",
                    Студик.Фамилия, Студик.Оценка);
            // Строка со студентом Погребицким выводится два раза,
            // поскольку он имеет две двойки
        }
    }
    // Объявляем класс, содержащий имя сотрудника, его возраст, а также
    // информацию, курит ли он:
    class Сотрудник
    {
        public String Имя { get; set; }
        public int Возраст { get; set; }
        public bool КуритЛи { get; set; }
    }
    // Объявляем класс, содержащий фамилию студента и список полученных
    // им оценок:
    class Студент
    {
        public string Фамилия { get; set; }
        public List<int> Оценки { get; set; }
    }
}
